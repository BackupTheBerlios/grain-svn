<!-- 

	Grain Core - A XForms processor for mobile terminals.
	$Id: build.xml 3387 2005-08-18 23:43:19Z go $ 
	
	Copyright (C) 2005 HAW International Inc.
	
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->

<project name="grain-sprout" default="target.debug.sprout.doja" basedir=".">

	<property file="local.build.properties" />
	<property file="build.properties" />

	<path id="doja.bootclasspath">
		<pathelement location="${doja.classes.zip}" />
		<pathelement location="${doja.doja_classes.zip}" />
	</path>
	<path id="sprout.src.path">
		<pathelement location="${sprout.src.dir}" />
	</path>
	<path id="sprout.test.src.path">
		<path refid="sprout.src.path"/>
		<pathelement location="${sprout.test.src.dir}" />
	</path>
	<path id="sprout.lib.path"/>
	<path id="sprout.test.lib.path">
		<pathelement location="${sprout.j2meunit.jar}"/>
	</path>
	
	<path id="server.src.path">
		<pathelement location="${server.src.dir}"/>
	</path>
	<path id="server.test.src.path">
		<path refid="server.src.path"/>
		<pathelement location="${server.test.src.dir}"/>
	</path>
	<path id="server.lib.path">
		<pathelement location="${server.servlet.jar}"/>
		<pathelement location="${server.log4j.jar}"/>
		<pathelement location="${server.struts.jar}"/>
		<pathelement location="${server.jdom.jar}"/>
		<pathelement location="${server.cuctus.jar}"/>
		<pathelement location="${server.httpunit.jar}"/>
		<pathelement location="${server.junit.jar}"/>
		<pathelement location="${server.xercesimpl.jar}"/>
		<pathelement location="${server.xml-apis.jar}"/>
		<pathelement location="${server.xmlpull.jar}"/>
	</path>

	<property name="release-name" value="${project.name}-${project.version}"/>	
	
	<target name="-cactus.taskdef">
		<taskdef resource="cactus.tasks">
			<classpath>
				<pathelement location="${server.cuctus.jar}"/>
				<pathelement location="${server.cuctus-ant.jar}"/>
				<pathelement location="${server.commons-logging.jar}"/>
				<pathelement location="${server.commons-httpclient.jar}"/>
				<pathelement location="${server.aspectjrt.jar}"/>
			</classpath>
		</taskdef>
	</target>
	
	<target name="-sprout.common.conf">
		<property name="compile.target.ver" value="${sprout.javac.target.ver}" />
		<property name="compile.source.ver" value="${sprout.javac.source.ver}" />
		<property name="compile.deprecation" value="on" />
	</target>
	
	<target name="-debug.option">
		<property name="java.option" value="-debugger -suspend -debugport 5005" />
	</target>
	
	<target name="-sprout.doja.init">
		<property name="sprout.platform.dir" value="${target.dir}/sprout/doja" />
		<mkdir dir="${sprout.platform.dir}" />
		<property name="sprout.main.class" value="${doja.main.class}" />
		<property name="sprout.test.bootstrap.class" value="${doja.test.bootstrap.class}" />
		<property name="platform.lib.class.include" value="${doja.lib.class.include}" />
		<property name="platform.lib.class.exclude" value="${doja.lib.class.exclude}" />
		<property name="compile.bootclasspath.ref" value="doja.bootclasspath" />
		<property name="j2me.preverify.exe" value="${doja.preverify.exe}"/>
		<property name="sprout.lib.dir" value="${sprout.platform.dir}/lib"/>
		<mkdir dir="${sprout.lib.dir}" />
		<copy file="${sprout.j2meunit.jar}" todir="${sprout.lib.dir}"/>
		<property name="sprout.jar.filename" value="${doja.jar.filename}"/>
		<property name="sprout.dist.dir" value="${dist.dir}/sprout/doja"/>

	</target>
		
	<target name="-sprout.dist.conf">
		<property name="target.type" value="dist"/>
		<property name="sprout.target.dir" value="${sprout.platform.dir}/dist"/>
		<property name="obfuscate.run" value="true"/>
		<property name="compile.debug" value="off" />
		<property name="compile.debuglevel" value="none"/>
		<property name="compile.optimize" value="on" />
		<property name="compile.src.path.ref" value="sprout.src.path" />
		<property name="compile.lib.path.ref" value="sprout.lib.path" />
		<property name="jam.postfix" value=".sample" />
	</target>

	<target name="-sprout.debug.conf">
		<property name="target.type" value="debug"/>
		<property name="sprout.target.dir" value="${sprout.platform.dir}/debug"/>
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="off" />
		<property name="compile.debuglevel" value="lines,vars,source"/>
		<property name="compile.src.path.ref" value="sprout.src.path" />
		<property name="compile.lib.path.ref" value="sprout.lib.path" />
		<property name="jam.postfix" value="" />
	</target>

	<target name="-sprout.test.conf">
		<property name="target.type" value="test"/>
		<property name="sprout.target.dir" value="${sprout.platform.dir}/test"/>
		<property name="sprout.testdata.dir" value="${sprout.target.dir}/testdata"/>
		<property name="sprout.test" value="true"/>
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="off" />
		<property name="compile.debuglevel" value="lines,vars,source"/>
		<property name="compile.src.path.ref" value="sprout.test.src.path" />
		<property name="compile.lib.path.ref" value="sprout.test.lib.path" />
		<property name="sprout.lib.class.include" value="${platform.lib.class.include}"/>
		<property name="sprout.lib.class.exclude" value="${platform.lib.class.exclude}"/>
		<property name="jam.postfix" value="" />
	</target>

	<target name="-jam.taskdef">
		<taskdef name="jam" classname="jp.haw.ant.JamTask" classpath="${sprout.jam-task.jar}" />
	</target>

	<target name="-proguard.taskdef">
		<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${sprout.proguard.jar}" />
	</target>

	<target name="-server.init">
		<property name="server.build.dir" value="${target.dir}/server" />
		<mkdir dir="${server.build.dir}" />
		<property name="compile.target.ver" value="1.4" />
		<property name="compile.source.ver" value="1.4" />
		<property name="compile.deprecation" value="on" />
		<property name="server.dist.dir" value="${dist.dir}/server"/>
	</target>
	
	<target name="-server.dist.conf">
		<property name="server.target.dir" value="${server.build.dir}/dist" />
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="on" />
		<property name="compile.src.path.ref" value="server.src.path" />
		<property name="compile.lib.path.ref" value="server.lib.path" />		
	</target>
		
	<target name="-server.test.conf">
		<property name="server.target.dir" value="${server.build.dir}/test" />
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="on" />
		<property name="compile.src.path.ref" value="server.test.src.path" />
		<property name="compile.lib.path.ref" value="server.test.lib.path" />		
    </target>

	<target name="compile.sprout" description="Compile">
		<property name="sprout.classes.dir" value="${sprout.target.dir}/classes"/> 
		<echo message="${sprout.classes.dir}s" />
		<mkdir dir="${sprout.classes.dir}" />
		<property name="sprout.lib-classes.dir" value="${sprout.target.dir}/lib-classes"/> 
		<mkdir dir="${sprout.lib-classes.dir}" />
		<echo message="include=${sprout.lib.class.include}, exclude=${sprout.lib.class.exclude}, lib=${sprout.lib.dir}"/>
		<unjar dest="${sprout.lib-classes.dir}">
			<fileset dir="${sprout.lib.dir}"/>
			<patternset>
				<include if="sprout.lib.class.include" name="${sprout.lib.class.include}"/>
				<include unless="sprout.lib.class.include" name=""/>
			    <exclude if="sprout.lib.class.exclude" name="${sprout.lib.class.exclude}"/>
				<exclude unless="sprout.lib.class.exclude" name="**/*"/>
			</patternset>
		</unjar>
		<javac 
			destdir="${sprout.classes.dir}" 
			bootclasspathref="${compile.bootclasspath.ref}" 
			target="${compile.target.ver}" 
			source="${compile.source.ver}" 
			deprecation="${compile.deprecation}" 
			debug="${compile.debug}" 
			debuglevel="${compile.debuglevel}"
			optimize="${compile.optimize}" 
			fork="true"
		>
			<src refid="${compile.src.path.ref}" />
			<classpath location="${sprout.lib-classes.dir}"/>
		</javac>
	</target>
	
	<target name="compile.server" description="Compile the server modules.">
		<property name="server.classes.dir" value="${server.target.dir}/classes"/>
		<mkdir dir="${server.classes.dir}" />
		<echo message="${server.classes.dir}" />
		<javac 
			destdir="${server.classes.dir}" 
			target="${compile.target.ver}" 
			source="${compile.source.ver}" 
			deprecation="${compile.deprecation}" 
			debug="${compile.debug}" 
			optimize="${compile.optimize}" 
			fork="true"
		>
			<src refid="${compile.src.path.ref}" />
			<classpath refid="server.lib.path"/>
		</javac>
	</target>
		
    <target name="jar.server.lib">
    	<property name="server.lib.dir" value="${server.target.dir}/lib"/>
    	<mkdir dir="${server.lib.dir}"/>
		<jar destfile="${server.lib.dir}/grain-gbxml-filter.jar">
			<fileset dir="${server.classes.dir}">
				<include name="jp/haw/grain/framework/servlet/**/*" />
				<include name="jp/haw/grain/framework/xml/**/*" />
				<include name="jp/haw/grain/framework/ParseException*" />
			</fileset>
		</jar>
    	<!--
		<jar destfile="${server.lib.dir}/grain-struts.jar">
			<fileset dir="${server.classes.dir}">
				<include name="jp/haw/grain/framework/struts/**/*" />
				<include name="jp/haw/grain/framework/XMLUtil*" />
			</fileset>
		</jar>
		-->        
    </target>

	<target name="prepare.test.sprout" if="sprout.testdata.dir">
		<mkdir dir="${sprout.testdata.dir}"/>
		<copy todir="${sprout.testdata.dir}">
			<fileset dir="${sprout.dir}/test/testdata"/>
		</copy>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${sprout.testdata.dir}/index.xml"/>
			<param name="gbxml.outfile" value="${sprout.classes.dir}/index.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${sprout.testdata.dir}/index2.xml"/>
			<param name="gbxml.outfile" value="${sprout.classes.dir}/index2.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${sprout.testdata.dir}/card-data.xml"/>
			<param name="gbxml.outfile" value="${sprout.classes.dir}/card-data.gbxml"/>
		</antcall>	
	</target>	
	
	
	<target name="jar.sprout" depends="prepare.test.sprout">
		<property name="sprout.work.dir" value="${sprout.target.dir}/work"/>
		<mkdir dir="${sprout.work.dir}" />
		<delete  file="${sprout.work.dir}/target.jar" failonerror="false"/>
		<jar destfile="${sprout.work.dir}/target.jar">
			<fileset dir="${sprout.classes.dir}"/>
			<fileset dir="${sprout.lib-classes.dir}">
				<include unless="sprout.lib.class.include" name=""/>
				<include if="sprout.lib.class.include" name="**/*"/>
				<exclude unless="sprout.lib.class.exclude" name="**/*"/>
				<exclude if="sprout.lib.class.exclude" name=""/>
			</fileset>
		</jar>
	</target>	
	
	<target name="obfuscate" if="obfuscate.run" depends="-proguard.taskdef, jar.sprout">
		<delete failonerror="no" file="${sprout.work.dir}/target_out.jar" />
		<proguard 
			overloadaggressively="true" 
			shrink="true" 
			usemixedcaseclassnames="false" 
			obfuscate="true" 
			defaultpackage="" 
			allowaccessmodification="true" 
			ignorewarnings="false" 
			verbose="true"
		>
			<libraryjar refid="${compile.bootclasspath.ref}" />
			<injar name="${sprout.work.dir}/target.jar" />
			<outjar name="${sprout.work.dir}/target_out.jar" />
			<keep access="public" type="class" name="${sprout.main.class}" />
			<keep access="public" type="class" name="${sprout.test.bootstrap.class}" />
		</proguard>
		<move file="${sprout.work.dir}/target_out.jar" tofile="${sprout.work.dir}/target.jar" />
	</target>

	<target name="preverify" description="preverify" depends="obfuscate">
		<property name="sprout.bin.dir" value="${sprout.target.dir}/bin"/>
		<mkdir dir="${sprout.bin.dir}" />
		<exec executable="${j2me.preverify.exe}" failonerror="true">
			<arg value="-cldc" />
			<arg value="-d" />
			<arg path="${sprout.bin.dir}" />
			<arg value="-classpath" />
			<arg pathref="${compile.bootclasspath.ref}" />
			<arg value="${sprout.work.dir}/target.jar" />
		</exec>
		<property name="sprout.jar.file" value="${sprout.bin.dir}/${sprout.jar.filename}" />
		<move file="${sprout.bin.dir}/target.jar" tofile="${sprout.jar.file}" />
	</target>

	<target name="jam" depends="-jam.taskdef" description="update doja jam file">
		<property name="target.jam.filename" value="${doja.jam.filename}.${target.type}${jam.postfix}"/>
		<property name="doja.jam.file" value="${sprout.bin.dir}/${doja.jam.filename}${jam.postfix}"/>

		<copy file="${sprout.dir}/conf/${target.jam.filename}" tofile="${doja.jam.file}"/>
		<condition property="target.jam.packageurl" value="">
			<not>
				<isset property="target.jam.packageurl" />
			</not>
		</condition>
		<jam 
			jam="${basedir}/${doja.jam.file}" 
			jar="${basedir}/${sprout.jar.file}"
			packageurl="${target.jam.packageurl}"
		/>
	</target>

	<target name="target.sprout.doja" depends="compile.sprout, preverify, jam"/>
	<target name="target.debug.sprout.doja" depends="-sprout.common.conf, -sprout.doja.init, -sprout.debug.conf, compile.sprout, preverify, jam"/>
	<target name="target.test.sprout.doja" depends="-sprout.common.conf, -sprout.doja.init, -sprout.test.conf, compile.sprout, preverify, jam"/>
	<target name="target.dist.sprout.doja" depends="-sprout.common.conf, -sprout.doja.init, -sprout.dist.conf, compile.sprout, preverify, jam">
		<mkdir dir="${sprout.dist.dir}/bin"/>
		<copy todir="${sprout.dist.dir}/bin">
			<fileset dir="${sprout.bin.dir}" />
		</copy>
		<!-- copy lisence files -->
		<copy todir="${sprout.dist.dir}">
			<fileset dir="${basedir}" includes="*.txt"/>
		</copy>
	</target>

	<target name="target.test.server" depends="-server.init, -server.test.conf, compile.server">
		<copy todir="${server.classes.dir}">
			<fileset dir="${server.dir}/resource/common">
				<include name="*.xml" />
			</fileset>
			<fileset dir="${server.dir}/test/resource">
				<include name="*.properties" />
			</fileset>
		</copy>
		
		<property name="server.webapp.dir" value="${server.target.dir}/webapp"/>
		<mkdir dir="${server.webapp.dir}"/>
		<copy todir="${server.webapp.dir}">
			<fileset dir="${server.dir}/test/webapp" />
		</copy>
		
		<property name="server.lib.dir" value="${server.target.dir}/lib"/>
		<mkdir dir="${server.lib.dir}"/>
		<copy file="${server.log4j.jar}" todir="${server.lib.dir}" />
		<copy file="${server.struts.jar}" todir="${server.lib.dir}" />
		<copy file="${server.jdom.jar}" todir="${server.lib.dir}" />
		<copy file="${server.httpunit.jar}" todir="${server.lib.dir}" />
		<copy file="${server.xmlpull.jar}" todir="${server.lib.dir}" />
	</target>

	<target name="target.dist.server" depends="-server.init, -server.dist.conf, compile.server, jar.server.lib">
		<mkdir dir="${server.dist.dir}/lib" />
		<copy todir="${server.dist.dir}/lib">
			<fileset dir="${server.lib.dir}" />
		</copy>
		<!-- copy lisence files -->
		<copy todir="${server.dist.dir}">
			<fileset dir="${basedir}" includes="*.txt"/>
		</copy>
	</target>

	<target name="release">
		<antcall target="target.dist.sprout.doja" inheritall="false"/>
		<antcall target="target.dist.server" inheritall="false"/>
		
		<property name="stage.dir" value="${release.dir}/stage"/>
		<property name="archive.dir" value="${release.dir}/archive"/>

		<mkdir dir="${stage.dir}/${release.name}-sprout-doja" />
		<copy todir="${stage.dir}/${release.name}-sprout-doja">
			<fileset dir="${dist.dir}/sprout/doja" />
		</copy>

		<mkdir dir="${stage.dir}/${release.name}-server-lib" />
		<copy todir="${stage.dir}/${release.name}-server-lib">
			<fileset dir="${dist.dir}/server" />
		</copy>
		
		<mkdir dir="${stage.dir}/${release.name}-src" />
		<copy todir="${stage.dir}/${release.name}-src">
			<fileset dir="${basedir}">
				<include name="build.properties"/>
				<include name="*.xml"/>
				<include name="*.sample"/>
				<include name="*.txt"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="src/**/*"/>
				<exclude name="**/conf/*.jam.dist"/>
				<exclude name="**/conf/*.jam.debug"/>
				<exclude name="**/conf/*.jam.test"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="lib/jam-task.jar"/>
			</fileset>
		</copy>
		
		<mkdir dir="${archive.dir}"/>
		<zip 
			zipfile="${archive.dir}/${release.name}-sprout-doja.zip" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-server-lib.zip" 
			basedir="${stage.dir}/${release.name}-server-lib"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-src.zip" 
			basedir="${stage.dir}/${release.name}-src"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-sprout-doja.tar" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-server-lib.tar" 
			basedir="${stage.dir}/${release.name}-server-lib"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-src.tar" 
			basedir="${stage.dir}/${release.name}-src"
			longfile="gnu"
		/>
		<gzip 
			src="${archive.dir}/${release.name}-sprout-doja.tar" 
			zipfile="${archive.dir}/${release.name}-sprout-doja.tar.gz" 
		/>
		<gzip 
			src="${archive.dir}/${release.name}-server-lib.tar" 
			zipfile="${archive.dir}/${release.name}-server-lib.tar.gz" 
		/>
		<gzip
			src="${archive.dir}/${release.name}-src.tar" 
			zipfile="${archive.dir}/${release.name}-src.tar.gz"
		/>
		<delete>
			<fileset dir="${archive.dir}" includes="*.tar"/>
		</delete>
		<checksum algorithm="MD5" fileext=".md5">
			<fileset dir="${archive.dir}" includes="*.zip,*.gz"/>
		</checksum>
	</target>

	<target name="run.server.test.junit" description="runs junit tests of the server modules" depends="target.test.server">
	  	<junit
	  	  fork="true"
	  	  printsummary="on"
	  	>
			<classpath>
				<path location="${server.classes.dir}"/>
				<path refid="server.lib.path"/>
			</classpath>
	  		<formatter type="plain" usefile="yes"/>
	  		<test name="test.AllTests" todir="${server.target.dir}"/>
	  	</junit>
	</target>

	<target name="war.cactify" description="runs junit tests of the server modules" depends="-cactus.taskdef, target.test.server">
	  	<cactifywar
	  	  destfile="${server.target.dir}/grain-server-test.war"
	  	  update="true"
	      mergewebxml="${server.webapp.dir}/WEB-INF/web.xml"
	  	  includes="${war.includes}"
	  	  excludes="${war.excludes}"
	  	  version="2.3"
	  	>
	  		<fileset dir="${server.webapp.dir}">
	  	  		<exclude name="WEB-INF/**/*" />
	  		</fileset>
		  	<classes dir="${server.classes.dir}"/>
		    <lib dir="${server.lib.dir}" />
		  	<webinf dir="${server.webapp.dir}/WEB-INF">
		  		<exclude name="web.xml" />
		  	</webinf>
	  	  	<filterredirector/>
	      	<servletredirector/>
	    </cactifywar>
	</target>

	<target name="run.server.test.cactus" description="runs junit tests of the server modules" depends="-cactus.taskdef, war.cactify">
		<echo message="java.home=${java.home}"/>
	    <cactus 
	      warfile="${server.target.dir}/grain-server-test.war"
	      fork="yes"
	    >
			<classpath>
				<pathelement location="${server.classes.dir}"/>
				<path refid="server.lib.path"/>
	      	</classpath>
	   		<containerset>
	        	<tomcat5x if="cactus.home.tomcat5x"
	            	dir="${cactus.home.tomcat5x}" port="${cactus.port}"
	            	output="${server.target.dir}/cactus-tomcat5x.out"
	            	todir="${server.target.dir}"/>
	      	</containerset>
	      <formatter type="brief" usefile="false"/>
	      <test name="jp.haw.grain.framework.servlet.BinaryXMLFilterTest"/>
	    </cactus>
	</target>
	
	<target name="run.server.test.web" depends="war.cactify">
		<cactus 
			warfile="${server.target.dir}/grain-server-test.war"
			fork="yes"
		>
			<jvmarg value="-Dtest.port=${cactus.port}"/>
			<jvmarg value="-Dtest.host=${cactus.host}"/>
			<jvmarg value="-Dtest.context=${cactus.context}"/>
			<jvmarg value="-Dtest.webapp.base=${basedir}/${server.target.dir}/webapp"/>
			<classpath>
				<pathelement location="${server.classes.dir}"/>
				<path refid="server.lib.path"/>
			</classpath>
			<containerset>
				<tomcat5x if="cactus.home.tomcat5x"
					dir="${cactus.home.tomcat5x}" port="${cactus.port}"
					output="${server.target.dir}/web-tomcat5x.out"
					todir="${server.target.dir}"/>
			</containerset>
			<formatter type="brief" usefile="false"/>
			<test name="jp.haw.grain.framework.servlet.BinaryXMLFilterWebTest"/>
		</cactus>
	</target>
	
	<target name="generate.gbxml" depends="target.dist.server">
		<java classname="jp.haw.grain.framework.xml.BinaryXMLOutputter" fork="true" failonerror="true">
			<classpath>
				<path refid="server.lib.path"/>
				<path location="${server.classes.dir}"/>
			</classpath>
			<arg value="${gbxml.encoding}"/>
			<arg path="${gbxml.infile}"/>
			<arg path="${gbxml.outfile}"/>
		</java>
	</target>
	
	<target name="emulate.sprout.doja" description="runs emulator">
		<condition property="java.option" value="">
			<not>
				<isset property="java.option" />
			</not>
		</condition>
		<exec executable="${doja.doja_g.exe}" failonerror="true">
			<arg line="${java.option}" />
			<arg value="-i" />
			<arg file="${doja.jam.file}" />
			<arg value="-j" />
			<arg file="${sprout.jar.file}" />
		</exec>
	</target>

	<target name="clean.all">
		<delete dir="${target.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${release.dir}" />
	</target>

	<target name="clean.classes">
		<delete failonerror="no" dir="${build.test.dir}/classes" />
		<delete failonerror="no" dir="${build.app.dir}/classes" />
	</target>
	
	<target name="run.sprout.doja.debug.off" depends="target.debug.sprout.doja, emulate.sprout.doja" />
	<target name="run.sprout.doja.debug.on" depends="-debug.option, target.debug.sprout.doja, emulate.sprout.doja" />
	<target name="run.sprout.doja.test" depends="target.test.sprout.doja, emulate.sprout.doja" />
	<target name="run.sprout.doja.test.debug" depends="-debug.option, target.test.sprout.doja, emulate.sprout.doja" />
	
</project>