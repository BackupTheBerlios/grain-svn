<!-- 

	Grain Core - A XForms processor for mobile terminals.
	$Id$ 
	
	Copyright (C) 2005 HAW International Inc.
	
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->

<project name="grain-sprout" default="target.debug.doja" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<property file="local.build.properties" />
	<property file="build.properties" />
	
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
	  <classpath>
	    <pathelement location="lib/maven-artifact-ant-2.0-dep.jar" />
	  </classpath>
	</typedef>
	
	<artifact:pom id="maven.project" file="pom.xml" />

	<artifact:dependencies pathId="dependency.complile.classpath" useScope="compile">
	  <pom refid="maven.project"/>
	</artifact:dependencies>
	
	<artifact:dependencies pathId="dependency.test.classpath" useScope="test">
	  <pom refid="maven.project"/>
	</artifact:dependencies>

	<artifact:dependencies pathId="dependency.bootclasspath" useScope="runtime">
	  <pom refid="maven.project"/>
	</artifact:dependencies>
	
	<path id="doja.bootclasspath">
		<pathelement location="${doja.classes.zip}" />
		<pathelement location="${doja.doja_classes.zip}" />
	</path>
	<path id="main.src.path">
		<pathelement location="${main.src.dir}" />
	</path>
	<path id="test.src.path">
		<path refid="main.src.path"/>
		<pathelement location="${test.src.dir}" />
	</path>
	<path id="lib.path"/>
	<path id="test.lib.path">
		<pathelement location="${j2meunit.jar}"/>
	</path>
	
	<property name="release-name" value="${project.name}-${project.version}"/>	
		
	<target name="-conf.common">
		<property name="compile.target.ver" value="${javac.target.ver}" />
		<property name="compile.source.ver" value="${javac.source.ver}" />
		<property name="compile.deprecation" value="on" />
	</target>
	
	<target name="-debug.option">
		<property name="java.option" value="-debugger -suspend -debugport 5005" />
	</target>
	
	<target name="-init.doja">
		<property name="platform.dir" value="${target.dir}/sprout/doja" />
		<mkdir dir="${platform.dir}" />
		<property name="main.class" value="${doja.main.class}" />
		<property name="test.bootstrap.class" value="${doja.test.bootstrap.class}" />
		<property name="platform.lib.class.include" value="${doja.lib.class.include}" />
		<property name="platform.lib.class.exclude" value="${doja.lib.class.exclude}" />
		<property name="compile.bootclasspath.ref" value="doja.bootclasspath" />
		<property name="j2me.preverify.exe" value="${doja.preverify.exe}"/>
		<property name="lib.dir" value="${platform.dir}/lib"/>
		<mkdir dir="${lib.dir}" />
		<copy file="${j2meunit.jar}" todir="${lib.dir}"/>
		<property name="jar.filename" value="${doja.jar.filename}"/>
		<property name="dist.dir" value="${dist.dir}/sprout/doja"/>

	</target>
		
	<target name="-conf.dist">
		<property name="target.type" value="dist"/>
		<property name="target.dir" value="${platform.dir}/dist"/>
		<property name="obfuscate.run" value="true"/>
		<property name="compile.debug" value="off" />
		<property name="compile.debuglevel" value="none"/>
		<property name="compile.optimize" value="on" />
		<property name="compile.src.path.ref" value="main.src.path" />
		<property name="compile.lib.path.ref" value="lib.path" />
		<property name="jam.postfix" value=".sample" />
	</target>

	<target name="-conf.debug">
		<property name="target.type" value="debug"/>
		<property name="target.dir" value="${platform.dir}/debug"/>
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="off" />
		<property name="compile.debuglevel" value="lines,vars,source"/>
		<property name="compile.src.path.ref" value="main.src.path" />
		<property name="compile.lib.path.ref" value="lib.path" />
		<property name="jam.postfix" value="" />
	</target>

	<target name="-conf.test">
		<property name="target.type" value="test"/>
		<property name="target.dir" value="${platform.dir}/test"/>
		<property name="testdata.dir" value="${target.dir}/testdata"/>
		<property name="test" value="true"/>
		<property name="compile.debug" value="on" />
		<property name="compile.optimize" value="off" />
		<property name="compile.debuglevel" value="lines,vars,source"/>
		<property name="compile.src.path.ref" value="test.src.path" />
		<property name="compile.lib.path.ref" value="test.lib.path" />
		<property name="lib.class.include" value="${platform.lib.class.include}"/>
		<property name="lib.class.exclude" value="${platform.lib.class.exclude}"/>
		<property name="jam.postfix" value="" />
	</target>

	<target name="-taskdef.jam">
		<taskdef name="jam" classname="jp.haw.ant.JamTask" classpathref="dependency.compile.classpath" />
	</target>

	<target name="-taskdef.proguard">
		<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpathref="dependency.compile.classpath" />
	</target>

	<target name="compile" description="Compile">
		<property name="classes.dir" value="${target.dir}/classes"/> 
		<echo message="${classes.dir}s" />
		<mkdir dir="${classes.dir}" />
		<property name="lib-classes.dir" value="${target.dir}/lib-classes"/> 
		<mkdir dir="${lib-classes.dir}" />
		<echo message="include=${lib.class.include}, exclude=${lib.class.exclude}, lib=${lib.dir}"/>
		<unjar dest="${lib-classes.dir}">
			<fileset dir="${lib.dir}"/>
			<patternset>
				<include if="lib.class.include" name="${lib.class.include}"/>
				<include unless="lib.class.include" name=""/>
			    <exclude if="lib.class.exclude" name="${lib.class.exclude}"/>
				<exclude unless="lib.class.exclude" name="**/*"/>
			</patternset>
		</unjar>
		<javac 
			destdir="${classes.dir}" 
			bootclasspathref="${compile.bootclasspath.ref}" 
			target="${compile.target.ver}" 
			source="${compile.source.ver}" 
			deprecation="${compile.deprecation}" 
			debug="${compile.debug}" 
			debuglevel="${compile.debuglevel}"
			optimize="${compile.optimize}" 
			fork="true"
		>
			<src refid="${compile.src.path.ref}" />
			<classpath location="${lib-classes.dir}"/>
		</javac>
	</target>
	
	<target name="prepare-test" if="testdata.dir">
		<mkdir dir="${testdata.dir}"/>
		<copy todir="${testdata.dir}">
			<fileset dir="${dir}/test/testdata"/>
		</copy>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${testdata.dir}/index.xml"/>
			<param name="gbxml.outfile" value="${classes.dir}/index.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${testdata.dir}/index2.xml"/>
			<param name="gbxml.outfile" value="${classes.dir}/index2.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml" inheritall="false">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${testdata.dir}/card-data.xml"/>
			<param name="gbxml.outfile" value="${classes.dir}/card-data.gbxml"/>
		</antcall>	
	</target>	
	
	
	<target name="jar" depends="prepare-test">
		<property name="work.dir" value="${target.dir}/work"/>
		<mkdir dir="${work.dir}" />
		<delete  file="${work.dir}/target.jar" failonerror="false"/>
		<jar destfile="${work.dir}/target.jar">
			<fileset dir="${classes.dir}"/>
			<fileset dir="${lib-classes.dir}">
				<include unless="lib.class.include" name=""/>
				<include if="lib.class.include" name="**/*"/>
				<exclude unless="lib.class.exclude" name="**/*"/>
				<exclude if="lib.class.exclude" name=""/>
			</fileset>
		</jar>
	</target>	
	
	<target name="obfuscate" if="obfuscate.run" depends="-taskdef.proguard, jar">
		<delete failonerror="no" file="${work.dir}/target_out.jar" />
		<proguard 
			overloadaggressively="true" 
			shrink="true" 
			usemixedcaseclassnames="false" 
			obfuscate="true" 
			defaultpackage="" 
			allowaccessmodification="true" 
			ignorewarnings="false" 
			verbose="true"
		>
			<libraryjar refid="${compile.bootclasspath.ref}" />
			<injar name="${work.dir}/target.jar" />
			<outjar name="${work.dir}/target_out.jar" />
			<keep access="public" type="class" name="${main.class}" />
			<keep access="public" type="class" name="${test.bootstrap.class}" />
		</proguard>
		<move file="${work.dir}/target_out.jar" tofile="${work.dir}/target.jar" />
	</target>

	<target name="preverify" description="preverify" depends="obfuscate">
		<property name="bin.dir" value="${target.dir}/bin"/>
		<mkdir dir="${bin.dir}" />
		<exec executable="${j2me.preverify.exe}" failonerror="true">
			<arg value="-cldc" />
			<arg value="-d" />
			<arg path="${bin.dir}" />
			<arg value="-classpath" />
			<arg pathref="${compile.bootclasspath.ref}" />
			<arg value="${work.dir}/target.jar" />
		</exec>
		<property name="jar.file" value="${bin.dir}/${jar.filename}" />
		<move file="${bin.dir}/target.jar" tofile="${jar.file}" />
	</target>

	<target name="jam" depends="-taskdef.jam" description="update doja jam file">
		<property name="target.jam.filename" value="${doja.jam.filename}.${target.type}${jam.postfix}"/>
		<property name="doja.jam.file" value="${bin.dir}/${doja.jam.filename}${jam.postfix}"/>

		<copy file="${dir}/conf/${target.jam.filename}" tofile="${doja.jam.file}"/>
		<condition property="target.jam.packageurl" value="">
			<not>
				<isset property="target.jam.packageurl" />
			</not>
		</condition>
		<jam 
			jam="${basedir}/${doja.jam.file}" 
			jar="${basedir}/${jar.file}"
			packageurl="${target.jam.packageurl}"
		/>
	</target>

	<target name="target.doja" depends="compile, preverify, jam"/>
	<target name="target.debug.doja" depends="-conf.common, -init.doja, -conf.debug, compile, preverify, jam"/>
	<target name="target.test.doja" depends="-conf.common, -init.doja, -conf.test, compile, preverify, jam"/>
	<target name="target.dist.doja" depends="-conf.common, -init.doja, -conf.dist, compile, preverify, jam">
		<mkdir dir="${dist.dir}/bin"/>
		<copy todir="${dist.dir}/bin">
			<fileset dir="${bin.dir}" />
		</copy>
		<!-- copy lisence files -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}" includes="*.txt"/>
		</copy>
	</target>

	<target name="release">
		<antcall target="target.dist.doja" inheritall="false"/>
		<antcall target="target.dist.server" inheritall="false"/>
		
		<property name="stage.dir" value="${release.dir}/stage"/>
		<property name="archive.dir" value="${release.dir}/archive"/>

		<mkdir dir="${stage.dir}/${release.name}-sprout-doja" />
		<copy todir="${stage.dir}/${release.name}-sprout-doja">
			<fileset dir="${dist.dir}/sprout/doja" />
		</copy>

		<mkdir dir="${stage.dir}/${release.name}-server-lib" />
		<copy todir="${stage.dir}/${release.name}-server-lib">
			<fileset dir="${dist.dir}/server" />
		</copy>
		
		<mkdir dir="${stage.dir}/${release.name}-src" />
		<copy todir="${stage.dir}/${release.name}-src">
			<fileset dir="${basedir}">
				<include name="build.properties"/>
				<include name="*.xml"/>
				<include name="*.sample"/>
				<include name="*.txt"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="src/**/*"/>
				<exclude name="**/conf/*.jam.dist"/>
				<exclude name="**/conf/*.jam.debug"/>
				<exclude name="**/conf/*.jam.test"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="lib/jam-task.jar"/>
			</fileset>
		</copy>
		
		<mkdir dir="${archive.dir}"/>
		<zip 
			zipfile="${archive.dir}/${release.name}-sprout-doja.zip" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-server-lib.zip" 
			basedir="${stage.dir}/${release.name}-server-lib"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-src.zip" 
			basedir="${stage.dir}/${release.name}-src"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-sprout-doja.tar" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-server-lib.tar" 
			basedir="${stage.dir}/${release.name}-server-lib"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-src.tar" 
			basedir="${stage.dir}/${release.name}-src"
			longfile="gnu"
		/>
		<gzip 
			src="${archive.dir}/${release.name}-sprout-doja.tar" 
			zipfile="${archive.dir}/${release.name}-sprout-doja.tar.gz" 
		/>
		<gzip 
			src="${archive.dir}/${release.name}-server-lib.tar" 
			zipfile="${archive.dir}/${release.name}-server-lib.tar.gz" 
		/>
		<gzip
			src="${archive.dir}/${release.name}-src.tar" 
			zipfile="${archive.dir}/${release.name}-src.tar.gz"
		/>
		<delete>
			<fileset dir="${archive.dir}" includes="*.tar"/>
		</delete>
		<checksum algorithm="MD5" fileext=".md5">
			<fileset dir="${archive.dir}" includes="*.zip,*.gz"/>
		</checksum>
	</target>
		
	<target name="emulate.doja" description="runs emulator">
		<condition property="java.option" value="">
			<not>
				<isset property="java.option" />
			</not>
		</condition>
		<exec executable="${doja.doja_g.exe}" failonerror="true">
			<arg line="${java.option}" />
			<arg value="-i" />
			<arg file="${doja.jam.file}" />
			<arg value="-j" />
			<arg file="${jar.file}" />
		</exec>
	</target>

	<target name="clean.all">
		<delete dir="${target.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${release.dir}" />
	</target>

	<target name="clean.classes">
		<delete failonerror="no" dir="${build.test.dir}/classes" />
		<delete failonerror="no" dir="${build.app.dir}/classes" />
	</target>
	
	<target name="run.doja" depends="target.debug.doja, emulate.doja" />
	<target name="run.doja.debug" depends="-debug.option, target.debug.doja, emulate.doja" />
	<target name="run.doja.test" depends="target.test.doja, emulate.doja" />
	<target name="run.doja.test.debug" depends="-debug.option, target.test.doja, emulate.doja" />
	
</project>