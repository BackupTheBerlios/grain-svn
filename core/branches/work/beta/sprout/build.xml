<!-- 

	Grain Core - A XForms processor for mobile terminals.
	$Id$ 
	
	Copyright (C) 2005 HAW International Inc.
	
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->

<project name="grain-sprout" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
	
	<path id="dependency.classpathref">
		<pathelement path="${dependency.classpath}"/>
	</path>
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
	  <classpath refid="dependency.classpathref"/>
    </typedef>
	<taskdef name="jam" classname="jp.haw.ant.JamTask">
		<classpath refid="dependency.classpathref"/>
	</taskdef>
	<taskdef name="proguard" classname="proguard.ant.ProGuardTask">
		<classpath refid="dependency.classpathref"/>
	</taskdef>
	
	<artifact:remoteRepository id="remote.repository" url="http://grain.sourceforge.jp/repos" />
	
	<target name="-bootclasspath">
		<artifact:dependencies pathId="boot.classpathref">
		    <dependency groupId="doja" artifactId="cldc_classes" version="3.5"/>
		    <dependency groupId="doja" artifactId="doja_classes" version="3.5"/>
		</artifact:dependencies>		
	</target>

	<target name="-compileclasspath">
		<artifact:dependencies pathId="compile.classpathref">
			<remoteRepository refid="remote.repository" />
		</artifact:dependencies>		
	</target>
	
	<target name="-testclasspath">
		<artifact:dependencies pathId="test.classpathref">
		    <dependency groupId="sprout" artifactId="j2meunit" version="1.1.1"/>
			<remoteRepository refid="remote.repository" />
		</artifact:dependencies>
		<artifact:dependencies filesetId="test.lib.filesetref">
		    <dependency groupId="sprout" artifactId="j2meunit" version="1.1.1"/>
			<remoteRepository refid="remote.repository" />
		</artifact:dependencies>
	</target>
		
	<target name="-preverifyclasspath">
		<artifact:dependencies pathId="cldc.preverifyer">
		    <dependency groupId="doja" artifactId="preverify" version="3.5"/>
		</artifact:dependencies>
	</target>
	
	<target name="-gbxmlclasspath">
		<artifact:dependencies pathId="gbxml-filter.classpathref">
		    <dependency groupId="jp.grain" artifactId="grain-gbxml-filter" version="a03"/>
		    <dependency groupId="log4j" artifactId="log4j" version="1.2.9"/>
			<remoteRepository refid="remote.repository" />
		</artifact:dependencies>			
	</target>
	
	<patternset id="j2meunit.patternsetref">
		<exclude name="j2meunit/midletui/**"/>
	</patternset>
	
	<patternset id="unjar.patternsetref">
		<include name="**/*.class"/>
		<exclude name="META-INF/**"/>
	</patternset>

	<target name="-debug.option">
		<property name="java.option" value="-debugger -suspend -debugport 5005" />
	</target>
		
	<target name="compile" description="Compile" depends="-bootclasspath">
	    <property name="bootpath" refid="boot.classpathref"/>
	    <echo message="bootpath=${bootpath}"/>
		<mkdir dir="${dest.dir}" />
		<javac 
			destdir="${dest.dir}" 
			bootclasspathref="boot.classpathref"
			target="1.1" 
			source="1.3" 
			deprecation="on"
			debug="${compile.debug}"
			debuglevel="${compile.debuglevel}"
			optimize="${compile.optimize}"
			fork="true"
		>
			<src location="${src.dir}" />
		</javac>
	</target>
	
	<target name="test-compile" description="Compile tests" depends="-bootclasspath, -testclasspath">
		<mkdir dir="${dest.dir}" />
		<echo message="src.dir=${src.dir}"/>
		<echo message="dest.dir=${dest.dir}"/>
		<echo message="application.classpth=${application.classpath}"/>
		<javac 
			destdir="${dest.dir}" 
			bootclasspathref="boot.classpathref"
			target="1.1"
			source="1.3" 
			deprecation="on" 
			debug="${compile.debug}"
			debuglevel="${compile.debuglevel}"
			optimize="${compile.optimize}" 
			fork="true"
		>
			<src location="${src.dir}" />
			<classpath>
				<path refid="test.classpathref"/>
				<path path="${application.classpath}"/>
			</classpath>
		</javac>
		<unjar dest="${dest.dir}">
			<fileset refid="test.lib.filesetref"/>
			<patternset refid="unjar.patternsetref"/>
			<patternset refid="j2meunit.patternsetref"/>
		</unjar>
	</target>

	<target name="emulator-resources" if="emulator.resources.dir">
		<echo>${emulator.resources.dir}</echo>
		<delete dir="${emulator.resources.dir}" failonerror="false"/>
	</target>
	
	<target name="process-test-resources" if="test-resources.dir" depends="emulator-resources">
		<delete dir="${test-resources.dir}" failonerror="false" includeemptydirs="true"/>
		<mkdir dir="${test-resources.dir}"/>
		<antcall target="generate.gbxml">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${resources.dir}/index.xml"/>
			<param name="gbxml.outfile" value="${test-resources.dir}/index.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${resources.dir}/index2.xml"/>
			<param name="gbxml.outfile" value="${test-resources.dir}/index2.gbxml"/>
		</antcall>
		<antcall target="generate.gbxml">
			<param name="gbxml.encoding" value="Shift_JIS"/>
			<param name="gbxml.infile" value="${resources.dir}/card-data.xml"/>
			<param name="gbxml.outfile" value="${test-resources.dir}/card-data.gbxml"/>
		</antcall>
	</target>
	
	<target name="generate.gbxml" depends="-gbxmlclasspath">
		<java classname="jp.haw.grain.framework.xml.BinaryXMLOutputter" fork="true" failonerror="true">
			<classpath>
				<path refid="gbxml-filter.classpathref"/>
				<path path="${resources.dir}"/>
			</classpath>
			<arg value="${gbxml.encoding}"/>
			<arg path="${gbxml.infile}"/>
			<arg path="${gbxml.outfile}"/>
		</java>
	</target>
	
	<target name="obfuscate" if="obfuscate.run" depends="-bootclasspath">
		<delete failonerror="no" dir="${work.dir}/obfuscate-classes"/>
		<mkdir dir="${work.dir}/obfuscated-classes"/>
		<property file="${conf.dir}/${app.descriptor.filename}" prefix="jam."/>
		<proguard 
			overloadaggressively="true" 
			shrink="true" 
			usemixedcaseclassnames="false" 
			obfuscate="true" 
			defaultpackage="" 
			allowaccessmodification="true" 
			ignorewarnings="false" 
			verbose="true"
		>
			<libraryjar refid="boot.classpathref" />
			<injar path="${work.dir}/target-classes" />
			<outjar path="${work.dir}/obfuscated-classes" />
			<keep access="public" type="class" name="${jam.AppClass}" />
		</proguard>
		<delete failonerror="no" dir="${work.dir}/target-classes"/>
		<move todir="${work.dir}/target-classes">
			<fileset dir="${work.dir}/obfuscated-classes"/>
		</move>
	</target>

	<target name="jar">
		<jar destfile="${bin.dir}/${app.jar.filename}">
			<fileset dir="${work.dir}/preverified-classes"/>
		</jar>
	</target>
	
	<target name="copy-classes" depends="copy-test-classes">
		<echo>copy-classes : from ${classes.dir} : to ${work.dir}/target-classes</echo>
		<copy todir="${work.dir}/target-classes">
			<fileset dir="${classes.dir}"/>
		</copy>		
	</target>

	<target name="copy-test-classes" if="test-classes.dir">
		<echo>copy-test-classes : from ${test-classes.dir} : to ${work.dir}/target-classes</echo>
		<copy todir="${work.dir}/target-classes">
			<fileset dir="${test-classes.dir}"/>
		</copy>		
	</target>

	<target name="preverify" description="preverify" depends="-bootclasspath, -preverifyclasspath">
		<property name="preverifyer" refid="cldc.preverifyer"/>
		<exec executable="${preverifyer}" failonerror="true">
			<arg value="-cldc" />
			<arg value="-d" />
			<arg path="${work.dir}/preverified-classes" />
			<arg value="-classpath" />
			<arg pathref="boot.classpathref" />
			<arg value="${work.dir}/target-classes" />
		</exec>
	</target>
	
	<target name="init.target">
		<delete dir="${bin.dir}" failonerror="false" includeemptydirs="true"/>
		<mkdir dir="${bin.dir}"/>
		<delete dir="${work.dir}" failonerror="false" includeemptydirs="true" />
		<mkdir dir="${work.dir}"/>
		<mkdir dir="${work.dir}/target-classes"/>
		<mkdir dir="${work.dir}/preverified-classes"/>
	</target>

	<target name="package" description="update doja jam file" depends="init.target, copy-classes, obfuscate, preverify, jar">
		<copy file="${conf.dir}/${app.descriptor.filename}" tofile="${bin.dir}/${app.descriptor.filename}"/>
		<condition property="app.url" value="">
			<not><isset property="app.url" /></not>
		</condition>
		<jam 
			jam="${bin.dir}/${app.descriptor.filename}" 
			jar="${bin.dir}/${app.jar.filename}"
			packageurl="${app.url}"
		/>
		<delete includeemptydirs="true" failonerror="false" dir="${work.dir}"/>
	</target>
	
	<target name="run" if="executable.emulator">
		<condition property="java.option" value="">
			<not>
				<isset property="java.option" />
			</not>
		</condition>
		<echo>java.option=${java.option}</echo>
		<exec executable="${executable.emulator}" failonerror="true">
			<arg line="${java.option}" />
			<arg value="-i" />
			<arg file="${bin.dir}/${app.descriptor.filename}" />
			<arg value="-j" />
			<arg file="${bin.dir}/${app.jar.filename}" />
		</exec>
	</target>
	
	<target name="release">
		<antcall target="target.dist.doja" inheritall="false"/>
		<antcall target="target.dist.server" inheritall="false"/>
		
		<property name="stage.dir" value="${release.dir}/stage"/>
		<property name="archive.dir" value="${release.dir}/archive"/>

		<mkdir dir="${stage.dir}/${release.name}-sprout-doja" />
		<copy todir="${stage.dir}/${release.name}-sprout-doja">
			<fileset dir="${dist.dir}/sprout/doja" />
		</copy>

		<mkdir dir="${stage.dir}/${release.name}-server-lib" />
		<copy todir="${stage.dir}/${release.name}-server-lib">
			<fileset dir="${dist.dir}/server" />
		</copy>
		
		<mkdir dir="${stage.dir}/${release.name}-src" />
		<copy todir="${stage.dir}/${release.name}-src">
			<fileset dir="${basedir}">
				<include name="build.properties"/>
				<include name="*.xml"/>
				<include name="*.sample"/>
				<include name="*.txt"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="src/**/*"/>
				<exclude name="**/conf/*.jam.dist"/>
				<exclude name="**/conf/*.jam.debug"/>
				<exclude name="**/conf/*.jam.test"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="lib/jam-task.jar"/>
			</fileset>
		</copy>
		
		<mkdir dir="${archive.dir}"/>
		<zip 
			zipfile="${archive.dir}/${release.name}-sprout-doja.zip" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-server-lib.zip" 
			basedir="${stage.dir}/${release.name}-server-lib"
		/>
		<zip 
			zipfile="${archive.dir}/${release.name}-src.zip" 
			basedir="${stage.dir}/${release.name}-src"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-sprout-doja.tar" 
			basedir="${stage.dir}/${release.name}-sprout-doja"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-server-lib.tar" 
			basedir="${stage.dir}/${release.name}-server-lib"
			longfile="gnu"
		/>
		<tar 
			tarfile="${archive.dir}/${release.name}-src.tar" 
			basedir="${stage.dir}/${release.name}-src"
			longfile="gnu"
		/>
		<gzip 
			src="${archive.dir}/${release.name}-sprout-doja.tar" 
			zipfile="${archive.dir}/${release.name}-sprout-doja.tar.gz" 
		/>
		<gzip 
			src="${archive.dir}/${release.name}-server-lib.tar" 
			zipfile="${archive.dir}/${release.name}-server-lib.tar.gz" 
		/>
		<gzip
			src="${archive.dir}/${release.name}-src.tar" 
			zipfile="${archive.dir}/${release.name}-src.tar.gz"
		/>
		<delete>
			<fileset dir="${archive.dir}" includes="*.tar"/>
		</delete>
		<checksum algorithm="MD5" fileext=".md5">
			<fileset dir="${archive.dir}" includes="*.zip,*.gz"/>
		</checksum>
	</target>

</project>